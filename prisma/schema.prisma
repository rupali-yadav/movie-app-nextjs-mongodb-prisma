// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model Profile {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String?
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  WatchProgress WatchProgress[]
  favorites     Favorite[]
}

model WatchProgress {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  movieId   String  @db.ObjectId
  profileId String  @db.ObjectId
  progress  Int
  // whenevr we add this relation an opposite 
  // presence of WatchProgress model should be present in the opposite model
  movie     Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, movieId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  accounts       Account[]
  favoriteIds    String[]  @db.ObjectId
  profiles       Profile[]
}

model Movie {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  videoUrl        String
  thumbnailUrl    String
  genre           String
  duration        String
  watchProgresses WatchProgress[]
  favorites     Favorite[]
}


model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId String   @db.ObjectId
  movieId   String   @db.ObjectId

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([profileId, movieId])
}


model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
